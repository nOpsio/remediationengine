AWSTemplateFormatVersion : 2010-09-09

Parameters:
  callbackURL:
    Type: String
    Description: |
        Nops callback URL link which is going to be used to finish integration.
        Used for sending request from Lambda.
        This parameter is generated by system and no tuning required.
        Do not share this with anyone.

Resources:

  SNSTopicInPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: SNSInputTopic
        Version: '2012-10-17'
        Statement:
          - Sid: SNSInputTopic
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::202279780353:root'
            Action: sns:Publish
            Resource: !Ref SNSInputTopic
      Topics:
        - !Ref SNSInputTopic

  SNSInputTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      # TopicName: "nOpsAutoRemediationListner"
      Subscription:
        - Endpoint: !GetAtt NopsRemediationLambda.Arn
          Protocol: lambda

  NopsRemediationLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref SNSInputTopic
      FunctionName: !GetAtt NopsRemediationLambda.Arn

  NopsRemediationLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:ListStackResources
                  - s3:PutBucketVersioning
                  - s3:PutEncryptionConfiguration
                  - s3:List*
                  - sns:Publish
                Resource: '*'
            Version: 2012-10-17
          PolicyName: root


  SNSOutputTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: 'nOps Remediation Result Topic'
      # TopicName: 'nOpsRemediationResultTopic'

  SNSTopicOutPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: SNSOutputTopic
        Version: '2012-10-17'
        Statement:
          - Sid: SNSOutputTopic
            Effect: Allow
            Principal:
              AWS: '202279780353'
            Action: sns:Subscribe
            Resource: !Ref SNSOutputTopic
      Topics:
        - !Ref SNSOutputTopic

  NopsRemediationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
            import boto3
            from botocore.vendored import requests
            import cfnresponse
            import json


            def handle_sns(record):
                """
                Function to invoke remediation calls passed from nOps. All calls are limited to
                policy `NopsRemediationLambdaRole`.
                """

                try:
                    sns_event = record['Sns']
                    print(sns_event)

                    # Unpack message
                    message = json.loads(sns_event['Message'])
                    print(message)

                    # Get client for product
                    client = boto3.client(message['Product'], region_name=message['Region'])

                    # Get remediation function
                    function_to_call = getattr(client, message['Function'])

                    # Call function and return response.
                    response = function_to_call(**message['Parameters'])

                except Exception as e:
                    response = {"error": str(e)}

                finally:
                    print(response)
                    return response

            def nops_callback(payload):
                callback_url = "${callbackURL}"
                response = requests.post(callback_url, data=payload)
                print(response)
                print(response.text)

            def handle_cloudformation(event, context):
                """Function handles Cloudformation Delete and Create events"""
                try:
                    print(event)
                    cfnresponse.send(
                        event, context, "SUCCESS",
                        {"Message": f"Resource {event['RequestType']} successful!"})
                    return True

                except Exception as e:
                    print('!!! Exception raised: ', e)
                    cfnresponse.send(event, context, "FAILED", {"Message": str(e)})
                    return False


            def lambda_handler(event, context):
                if event.get("RequestType") in ["Create", "Delete"]:
                    print("Handling Cloudformation")
                    response = {"Status": handle_cloudformation(event, context), "Event": event, "Type": "cloudformation"}

                elif 'Records' in event:
                    print("Handling SNS")
                    response = {"Status": [handle_sns(record) for record in event['Records']], "Event": event, "Type": "sns"}

                else:
                    print("No handler found")
                    response = {"Status": "Unhandled event type", "Event": event, "Type": "error"}

                raw_response = json.dumps(response, default=str)
                nops_callback(raw_response)
                return raw_response

      Runtime: python3.7
      Handler: index.lambda_handler
      Role: !GetAtt NopsRemediationLambdaRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSOutputTopic
      Timeout: 120
      Description: |
          Lambda function to update nOps infra with role creation output.

  NopsRemediationLambdaTrigger:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt NopsRemediationLambda.Arn
    DependsOn:
      - NopsRemediationLambda
      - SNSOutputTopic
      - SNSInputTopic

Outputs:
  RemediationTopicARN:
    Description: 'SNS IN'
    Value: !Ref SNSInputTopic
  RemidiationOutputTopicARN:
    Description: 'SNS OUT'
    Value: !Ref SNSOutputTopic
